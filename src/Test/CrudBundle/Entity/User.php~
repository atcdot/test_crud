<?php

namespace Test\CrudBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\Encoder\BCryptPasswordEncoder;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * User
 *
 * @ORM\Table()
 * @ORM\Entity
 */
class User implements UserInterface
{
    /**
     * @ORM\ManyToOne(targetEntity="UserRoles", inversedBy="users")
     * @ORM\JoinColumn(name="userRolesId", referencedColumnName="id")
     */
    protected $userRoles;

    public function getSalt(){
        return null;
    }

    /**
     * @ORM\ManyToMany(targetEntity="UserAddress", inversedBy="users",  cascade={"persist", "remove"})
     * @ORM\JoinTable(name="users_userAddresses")
     **/
    protected $userAddresses;

    public function __construct()
    {
        $this->userAddresses = new ArrayCollection();
        $this->userRoles = new ArrayCollection();
    }


    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;


    /**
     * @var string
     *
     * @ORM\Column(name="firstName", type="string", length=30)
     */
    protected $firstName;

    /**
     * @var string
     *
     * @ORM\Column(name="lastName", type="string", length=30)
     */
    protected $lastName;

    /**
     * @var integer
     *
     * @ORM\Column(name="age", type="smallint")
     */
    protected $age;

    /**
     * @var string
     *
     * @ORM\Column(name="email", type="string", length=50)
     */
    protected $email;


    /**
     * @ORM\Column(type="string", length=255)
     * @Assert\NotBlank()
     * @Assert\Length(max = 4096)
     */
    protected $password;


    /**
     * Геттер для имени пользователя.
     *
     * @return string The username.
     */
    public function getUsername()
    {
        return $this->getEmail();
    }

    /**
     * Set password
     *
     * @param string $password
     * @return User
     */
    public function setPassword($password)
    {
//        $encoder = $this->container->get('security.password_encoder');
//        $encoded = $encoder->encodePassword($user, $plainPassword);
//
//        $encoder = new MessageDigestPasswordEncoder('sha512', true, 10);
//        $ec_password = $encoder->encodePassword($password, $this->getSalt());
//
//        $this->password = $ec_password;
//
//        return $this;

        $user = $this;
        $encoder = new BCryptPasswordEncoder(12);
        $enc_password = $encoder->encodePassword($password, $this->getSalt());

        $this->password = $enc_password;
    }

    /**
     * Get password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * @return ArrayCollection
     */
    public function getRoles()
    {
        return $this->getUserRoles();
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set firstName
     *
     * @param string $firstName
     * @return User
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Get firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * Set lastName
     *
     * @param string $lastName
     * @return User
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;

        return $this;
    }

    /**
     * Get lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * Set age
     *
     * @param integer $age
     * @return User
     */
    public function setAge($age)
    {
        $this->age = $age;

        return $this;
    }

    /**
     * Get age
     *
     * @return integer
     */
    public function getAge()
    {
        return $this->age;
    }

    /**
     * Set email
     *
     * @param string $email
     * @return User
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set userRoles
     *
     * @param \Test\CrudBundle\Entity\UserRoles $userRoles
     * @return User
     */
    public function setUserRoles(UserRoles $userRoles = null)
    {
        $this->userRoles = $userRoles;

        return $this;
    }

    /**
     * Get userRoles
     *
     * @return \Test\CrudBundle\Entity\UserRoles
     */
    public function getUserRoles()
    {
        return $this->userRoles;
    }

    /**
     * Add userAddresses
     *
     * @param \Test\CrudBundle\Entity\UserAddress $userAddresses
     * @return User
     */
    public function addUserAddress(\Test\CrudBundle\Entity\UserAddress $userAddresses)
    {
        $this->userAddresses[] = $userAddresses;

        return $this;
    }

    /**
     * Remove userAddresses
     *
     * @param \Test\CrudBundle\Entity\UserAddress $userAddresses
     */
    public function removeUserAddress(\Test\CrudBundle\Entity\UserAddress $userAddresses)
    {
        $this->userAddresses->removeElement($userAddresses);
    }

    /**
     * Get userAddresses
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUserAddresses()
    {
        return $this->userAddresses;
    }

    /**
     * Сброс прав пользователя.
     */
    public function eraseCredentials()
    {

    }
}
